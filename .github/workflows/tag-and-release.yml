name: tag and release new version

on:
  pull_request_target:
    types:
      - closed

env:
  PACT_BROKER_BASE_URL: ${{ vars.PACT_BROKER_BASE_URL }}
  PACT_BROKER_TOKEN: ${{ secrets.PACT_BROKER_TOKEN }}

jobs:
  tag:
    name: create git tag
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == github.event.repository.default_branch
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.bump.outputs.version }}
      changes: ${{ steps.details.outputs.changes }}
      is_new_version: ${{ steps.details.outputs.is_new_version }}
    steps:
      - id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.PUBLIC_RELEASE_MANAGER_ID }}
          private-key: ${{ secrets.PUBLIC_RELEASE_MANAGER_SECRET }}
      - uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          ref: ${{ github.event.repository.default_branch }}
          # `fetch-depth` > 0 is required to have `ref` have an effect
          fetch-depth: 999
          fetch-tags: true
      - id: bump
        uses: commitizen-tools/commitizen-action@master
        with:
          changelog_increment_filename: .changes.md
          git_redirect_stderr: true
          commit: true
          push: false
          no_raise: 21
      - id: details
        shell: bash
        run: |
          {
            echo 'changes<<EOF'
            cat .changes.md
            echo EOF
          } >> "$GITHUB_OUTPUT"

          if [ "$REVISION" != "$PREVIOUS_REVISION" ]; then
            echo "is_new_version=1" >> "$GITHUB_OUTPUT"
            # pushing seperately to use correct auth set up during actions/checkout
            git push --atomic --tags origin HEAD:${GITHUB_REF_NAME}
          fi

  release:
    name: create new release
    needs:
      - tag
    if: ${{ needs.tag.outputs.is_new_version }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.tag.outputs.tag }}
      - name: Install poetry
        run: pipx install poetry
      - uses: actions/github-script@v7
        env:
          CHANGES: ${{ needs.tag.outputs.changes }}
          TAG: ${{ needs.tag.outputs.tag }}
        with:
          script: |
            const { CHANGES, TAG } = process.env
            github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: TAG,
              body: CHANGES,
            })
      - name: Build package
        run: poetry build
      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
      - name: Get latest pact version
        id: latest_pact_version
        run: >
          echo "version_num=$(curl -H 'Authorization: Bearer ${{secrets.PACT_BROKER_TOKEN}}'
          https://satellitevu.pactflow.io/pacticipants/python-sdk/latest-version | jq .number)" >> $GITHUB_OUTPUT
      - name: Record release in Pactflow  ðŸš€
        env:
          GIT_BRANCH: ${{ github.ref }}
          GIT_COMMIT: ${{ steps.latest_pact_version.outputs.version_num }}
          ENVIRONMENT: production
          VERSION_TAG: ${{ steps.bump.outputs.version }}
        run: make -f pact.mk release
